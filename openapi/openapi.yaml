openapi: 3.0.0
info:
  title: Kit API
  description: The Kit REST API. Please see https://docs.kit.zip/api for more details.
  version: '1.0.0'
  termsOfService: https://kit.zip/policies/terms-of-use
  contact:
    name: Kit Support
    email: support@kit.zip
servers:
  - url: https://api.kit.zip/v1
tags:
  - name: Integrations
    description: An integration represents a connection between your application and a third-party platform.
  - name: Link tokens
    description: Use a link token to connect your end user to an integration.
  - name: Linked accounts
    description: A linked account represents a connection between your end user and an integration.
  - name: Webhooks
    description: Use webhooks to listen for events related to your linked accounts.
paths:
  /integrations:
    get:
      operationId: listIntegrations
      tags:
        - Integrations
      summary: Returns a list of integrations.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
      x-kitMeta:
        name: List integrations
        group: integrations
        returns: A list of [integration](/api/integrations/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/integrations" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              my_integrations = client.integrations.list()

              print(my_integrations.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const myIntegrations = await kit.integrations.list();

                console.log(myIntegrations.data);
              }

              main();
          response: &list_integrations_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "integration",
                  "slug": "github",
                  "name": "Github",
                  "logo_url": "https://kit-integrations.s3.amazonaws.com/github.svg",
                  "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/github-dark.svg",
                  "is_enabled": true,
                  "auth_scheme": "oauth2",
                  "use_oauth_credentials": false,
                  "oauth_client_id": null,
                  "oauth_client_secret": null,
                },
                {
                  "object": "integration",
                  "slug": "notion",
                  "name": "Notion",
                  "logo_url": "https://kit-integrations.s3.amazonaws.com/notion.svg",
                  "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/notion-dark.svg",
                  "is_enabled": true,
                  "auth_scheme": "oauth2",
                  "use_oauth_credentials": false,
                  "oauth_client_id": null,
                  "oauth_client_secret": null,
                },
                {
                  "object": "integration",
                  "slug": "slack",
                  "name": "Slack",
                  "logo_url": "https://kit-integrations.s3.amazonaws.com/slack.svg",
                  "is_enabled": true,
                  "auth_scheme": "oauth2",
                  "use_oauth_credentials": false,
                  "oauth_client_id": null,
                  "oauth_client_secret": null,
                }
              ]
            }
  /integrations/{integration_slug}:
    get:
      operationId: retrieveIntegration
      tags:
        - Integrations
      summary: Retrieves an integration.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationObject'
      x-kitMeta:
        name: Retrieve integration
        group: integrations
        returns: The [integration](/api/integrations/object) object matching the specified slug.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              integration = client.integrations.retrieve("github")

              print(integration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integration = await kit.integrations.retrieve("github");

                console.log(integration);
              }

              main();
          response: &retrieve_integration_example |
            {
              "object": "integration",
              "slug": "github",
              "name": "Github",
              "logo_url": "https://kit-integrations.s3.amazonaws.com/github.svg",
              "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/github-dark.svg",
              "is_enabled": true,
              "auth_scheme": "oauth2",
              "use_oauth_credentials": false,
              "oauth_client_id": null,
              "oauth_client_secret": null,
            }
    post:
      operationId: updateIntegration
      tags:
        - Integration
      summary: Updates an integration.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationObject'
      x-kitMeta:
        name: Update integration
        group: integrations
        beta: true
        returns: The modified [integration](/api/integrations/object) object.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{ "is_enabled": false }'
            python: |
              from kit import Kit
              client = Kit()

              updated_integration = client.integrations.update(
                "github",
                { is_enabled: false }
              )

              print(updated_integration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const updatedIntegration = await kit.integrations.update(
                  "github",
                  { is_enabled: false }
                );

                console.log(updatedIntegration);
              }

              main();
          response: |
            {
              "object": "integration",
              "slug": "github",
              "name": "Github",
              "logo_url": "https://kit-integrations.s3.amazonaws.com/github.svg",
              "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/github-dark.svg",
              "is_enabled": false,
              "auth_scheme": "oauth2",
              "use_oauth_credentials": false,
              "oauth_client_id": null,
              "oauth_client_secret": null,
            }
  /integrations/{integration_slug}/syncs:
    get:
      operationId: listIntegrationSyncs
      tags:
        - Integrations
      summary: Returns a list of integration syncs.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to which the syncs belong.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationSyncsResponse'
      x-kitMeta:
        name: List integration syncs
        group: integrations
        returns: A list of [integration sync](/api/integrations/syncs/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/integrations/github/syncs" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              integration_syncs = client.integrations.syncs.list(
                "github"
              )

              print(integration_syncs.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integrationSyncs = await kit.integrations.syncs.list(
                  "github"
                );

                console.log(integrationSyncs.data);
              }

              main();
          response: &list_integration_syncs_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "integration_sync",
                  "slug": "issues",
                  "integration_slug": "github",
                  "name": "Issues",
                  "description": "Sync the Github issues from all repositories in a user's account.",
                  "is_enabled": true,
                  "default_frequency": "every day",
                  "auto_start": true,
                  "schema": {
                    "title": "Issue",
                    "description": "Use issues to plan, discuss and track work in a repository.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier of the issue.",
                      },
                      "author": {
                        "type": "string",
                        "description": "The author of the issue.",
                      },
                      // other properties...
                    }
                  },
                  "excluded_properties": [],
                },
                {
                  "object": "integration_sync",
                  "slug": "repositories",
                  "integration_slug": "github",
                  "name": "Repositories",
                  "description": "Sync the Github repositories in a user's account.",
                  "is_enabled": false,
                  "default_frequency": "every day",
                  "auto_start": false,
                  "schema": {
                    "title": "Repository",
                    "description": "A repository contains code, files, and each file's revision history.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier of the repository.",
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the repository.",
                      },
                      // other properties...
                    }
                  },
                  "excluded_properties": [],
                },
              ]
            }
  /integrations/{integration_slug}/syncs/{sync_slug}:
    get:
      operationId: retrieveIntegrationSync
      tags:
        - Integrations
      summary: Retrieves an integration sync.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to which the sync belongs.
        - in: path
          name: sync_slug
          required: true
          schema:
            type: string
          description: The slug of the sync.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSyncObject'
      x-kitMeta:
        name: Retrieve integration sync
        group: integrations
        returns: The [integration sync](/api/integrations/syncs/object) object matching the specified slug.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/syncs/issues \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              integration_sync = client.integrations.syncs.retrieve(
                "github",
                "issues"
              )

              print(integration_sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integrationSync = await kit.integrations.syncs.retrieve(
                  "github"
                  "issues"
                );

                console.log(integrationSync);
              }

              main();
          response: &retrieve_integration_sync_example |
            {
              "object": "integration_sync",
              "slug": "issues",
              "integration_slug": "github",
              "name": "Issues",
              "description": "Sync the Github issues from all repositories in a user's account.",
              "is_enabled": true,
              "default_frequency": "every day",
              "auto_start": true,
              "schema": {
                "title": "Issue",
                "description": "Use issues to plan, discuss and track work in a repository.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier of the issue.",
                  },
                  "author": {
                    "type": "string",
                    "description": "The author of the issue.",
                  },
                  // other properties...
                }
              },
              "excluded_properties": [],
            }
    post:
      operationId: updateIntegrationSync
      tags:
        - Integrations
      summary: Updates an integration sync.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to which the sync belongs.
        - in: path
          name: sync_slug
          required: true
          schema:
            type: string
          description: The slug of the sync.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationSyncRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSyncObject'
      x-kitMeta:
        name: Update integration sync
        group: integrations
        returns: The [integration sync](/api/integrations/syncs/object) object matching the specified slug.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/syncs/repositories \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{
                    "is_enabled": true,
                    "default_frequency": "every 2 weeks",
                  }'
            python: |
              from kit import Kit
              client = Kit()

              integration_sync = client.integrations.syncs.update(
                "github",
                "repositories",
                {
                  "is_enabled": true,
                  "default_frequency": "every 2 weeks",
                }
              )

              print(integration_sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integrationSync = await kit.integrations.syncs.update(
                  "github"
                  "repositories",
                  {
                    "is_enabled": true,
                    "default_frequency": "every 2 weeks",
                  }
                );

                console.log(integrationSync);
              }

              main();
          response: |
            {
              "object": "integration_sync",
              "slug": "repositories",
              "integration_slug": "github",
              "is_enabled": true,
              "default_frequency": "every 2 weeks",
              "auto_start": false,
              "schema": {
                "title": "Repository",
                "description": "A repository contains code, files, and each file's revision history.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier of the repository.",
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the repository.",
                  },
                  // other properties...
                }
              },
              "excluded_properties": [],
            }
  /integrations/{integration_slug}/actions:
    get:
      operationId: listIntegrationActions
      tags:
        - Integrations
      summary: Returns a list of integration actions.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to which the actions belong.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationActionsResponse'
      x-kitMeta:
        name: List integration actions
        group: integrations
        returns: A list of [integration action](/api/integrations/actions/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/integrations/actions" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              integration_actions = client.integrations.actions.list(
                "github"
              )

              print(integration_actions.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integrationActions = await kit.integrations.actions.list(
                  "github"
                );

                console.log(integrationActions.data);
              }

              main();
          response: &list_integration_actions_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "integration_action",
                  "slug": "create-repository",
                  "integration_slug": "github",
                  "name": "Create repository",
                  "description": "Create a new Github repository.",
                  "is_enabled": true,
                  "schema": {
                    "title": "Create repository",
                    "description": "Create a new Github repository.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the repository.",
                        "required": true,
                      },
                      "description": {
                        "type": "string",
                        "description": "A short description of the repository.",
                      },
                      // other properties...
                    }
                  },
                },
                {
                  "object": "integration_action",
                  "slug": "write-file",
                  "integration_slug": "github",
                  "is_enabled": false,
                  "schema": {
                    "title": "Write file",
                    "description": "Create or update a file in a Github repository.",
                    "properties": {
                      "repo": {
                        "type": "string",
                        "description": "The name of the repository without the .git extension.",
                        "required": true,
                      },
                      "path": {
                        "type": "string",
                        "description": "The file path.",
                        "required": true,
                      },
                      // other properties...
                    }
                  },
                },
              ]
            }
  /integrations/{integration_slug}/actions/{action_slug}:
    get:
      operationId: retrieveIntegrationAction
      tags:
        - Integrations
      summary: Retrieves an integration action.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to which the action belongs.
        - in: path
          name: action_slug
          required: true
          schema:
            type: string
          description: The slug of the action.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationActionObject'
      x-kitMeta:
        name: Retrieve integration action
        group: integrations
        returns: The [integration action](/api/integrations/actions/object) object matching the specified slug.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/action/create-repository \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              integration_action = client.integrations.actions.retrieve(
                "github",
                "create-repository"
              )

              print(integration_action)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integrationAction = await kit.integrations.actions.retrieve(
                  "github"
                  "create-repository"
                );

                console.log(integrationAction);
              }

              main();
          response: &retrieve_integration_action_example |
            {
              "object": "integration_action",
              "slug": "create-repository",
              "integration_slug": "github",
              "name": "Create repository",
              "description": "Create a new Github repository.",
              "is_enabled": true,
              "schema": {
                "title": "Create repository",
                "description": "Create a new Github repository.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository.",
                    "required": true,
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository.",
                  },
                  // other properties...
                }
              },
            }
    post:
      operationId: updateIntegrationAction
      tags:
        - Integrations
      summary: Updates an integration action.
      parameters:
        - in: path
          name: integration_slug
          required: true
          schema:
            type: string
          description: The slug of the integration to which the action belongs.
        - in: path
          name: action_slug
          required: true
          schema:
            type: string
          description: The slug of the action.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationActionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationActionObject'
      x-kitMeta:
        name: Update integration action
        group: integrations
        returns: The [integration action](/api/integrations/actions/object) object matching the specified slug.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/actions/write-file \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{ "is_enabled": true }'
            python: |
              from kit import Kit
              client = Kit()

              integration_action = client.integrations.actions.update(
                "github",
                "write-file",
                { "is_enabled": true }
              )

              print(integration_action)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integrationAction = await kit.integrations.actions.update(
                  "github"
                  "write-file",
                  { "is_enabled": true }
                );

                console.log(integrationAction);
              }

              main();
          response: |
            {
              "object": "integration_action",
              "slug": "write-file",
              "integration_slug": "github",
              "is_enabled": true,
              "schema": {
                "title": "Write file",
                "description": "Create or update a file in a Github repository.",
                "properties": {
                  "repo": {
                    "type": "string",
                    "description": "The name of the repository without the .git extension.",
                    "required": true,
                  },
                  "path": {
                    "type": "string",
                    "description": "The file path.",
                    "required": true,
                  },
                  // other properties...
                }
              },
            }
  /link-tokens:
    get:
      operationId: listLinkTokens
      tags:
        - Link tokens
      summary: Returns a list of link tokens.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLinkTokensResponse'
      x-kitMeta:
        name: List link tokens
        group: link-tokens
        returns: A list of [link token](/api/link-tokens/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/link-tokens" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              my_link_tokens = client.link_tokens.list()

              print(my_link_tokens.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const myLinkTokens = await kit.linkTokens.list();

                console.log(myLinkTokens.data);
              }

              main();
          response: &list_link_tokens_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "link_token",
                  "id": "tok_1NG8Du2eZvKYlo2CUI79vXWy",
                  "url": "https://api.kit.zip/link/tok_1NG8Du2eZvKYlo2CUI79vXWy"
                  "integration_slug": "github",
                  "linked_account_id": null,
                  "expires_in_mins": 60,
                  "language": "en",
                  "redirect_url": "https://piperchat.com/integrations/callback",
                  "metadata": { 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
                  "created_at": 1708387617,
                },
                {
                  "object": "link_token",
                  "id": "tok_3MtwBwLkdIwHu7ix28a3tqPa",
                  "url": "https://api.kit.zip/link/tok_3MtwBwLkdIwHu7ix28a3tqPa",
                  "integration_slug": null,
                  "linked_account_id": null,
                  "expires_in_mins": 180,
                  "language": "en",
                  "redirect_url": null,
                  "metadata": {},
                  "created_at": 1708388119,
                },
                {
                  "object": "link_token",
                  "id": "tok_1Mm8s8LkdIwHu7ix0OXBfTRG",
                  "url": "https://api.kit.zip/link/tok_1Mm8s8LkdIwHu7ix0OXBfTRG",
                  "integration_slug": "zendesk",
                  "linked_account_id": null,
                  "expires_in_mins": 30,
                  "language": "en",
                  "redirect_url": null,
                  "metadata": {},
                  "created_at": 1708388447,
                }
              ]
            }
    post:
      operationId: createLinkToken
      tags:
        - Link token
      summary: Create a link token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkTokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTokenObject'
      x-kitMeta:
        name: Create link token
        group: link-tokens
        returns: A [link token](/docs/api/link-token/object) object.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/link-tokens" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{
                  "integration_slug": "slack",
                  "expires_in_mins": 30,
                  "redirect_url": "https://piperchat.com/integrations/callback",
                  "metadata": { 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
                }'
            python: |
              from kit import Kit
              client = Kit()

              link_token = client.link_tokens.create(
                  integration_slug="slack",
                  expires_in_mins=30,
                  redirect_url="https://piperchat.com/integrations/callback",
                  metadata={ 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
              )

              print(link_token)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const linkToken = await kit.linkTokens.create({
                  "integration_slug": "slack",
                  "expires_in_mins": 30,
                  "redirect_url": "https://piperchat.com/integrations/callback",
                  "metadata": { 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
                });

                console.log(linkToken);
              }

              main();
          response: &create_link_token_example |
            {
              "object": "link_token",
              "id": "tok_29Y8Du2eZvKYlo2CUI79vXWy",
              "url": "https://api.kit.zip/link/tok_29Y8Du2eZvKYlo2CUI79vXWy"
              "integration_slug": "slack",
              "linked_account_id": null,
              "expires_in_mins": 30,
              "language": "en",
              "redirect_url": "https://piperchat.com/integrations/callback",
              "metadata": { 
                "piperchat_id": "26106b1f16fed8639d878"
              },
              "created_at": 1708387618,
            }
  /link-tokens/{link_token_id}:
    get:
      operationId: retrieveLinkToken
      tags:
        - Link tokens
      summary: Retrieves a link token.
      parameters:
        - in: path
          name: link_token_id
          required: true
          schema:
            type: string
          description: The ID of the link token to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTokenObject'
      x-kitMeta:
        name: Retrieve link token
        group: link-tokens
        returns: The [link token](/api/link-tokens/object) object matching the specified ID.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/link-tokens/tok_29Y8Du2eZvKYlo2CUI79vXWy \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
            python: |
              from kit import Kit
              client = Kit()

              link_token = client.link_tokens.retrieve("tok_29Y8Du2eZvKYlo2CUI79vXWy")

              print(link_token)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const linkToken = await kit.linkTokens.retrieve("tok_29Y8Du2eZvKYlo2CUI79vXWy");

                console.log(linkToken);
              }

              main();
          response: *create_link_token_example
    delete:
      operationId: deleteLinkToken
      tags:
        - Link tokens
      summary: Deletes a link token.
      parameters:
        - in: path
          name: link_token_id
          required: true
          schema:
            type: string
          description: The ID of the link token to delete.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLinkTokenResponse'
      x-kitMeta:
        name: Delete link token
        group: link-tokens
        beta: true
        returns: Deletion status
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/link-tokens/tok_29Y8Du2eZvKYlo2CUI79vXWy \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -X DELETE
            python: |
              from kit import Kit
              client = Kit()

              response = client.link_tokens.delete("tok_29Y8Du2eZvKYlo2CUI79vXWy")

              print(response)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const response = await kit.linkTokens.delete("tok_29Y8Du2eZvKYlo2CUI79vXWy");

                console.log(response);
              }

              main();
          response: |
            {
              "id": "tok_29Y8Du2eZvKYlo2CUI79vXWy",
              "object": "link_token.deleted",
              "deleted": true
            }

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: 'bearer'

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
      required:
        - type
        - message
        - param
        - code

    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
        - error

    IntegrationObject:
      title: Integration
      description: Describes a connection between a third-party integration provider and your application.
      properties:
        object:
          type: string
          description: The object type, which is always "integration".
          enum: [integration]
        slug:
          type: string
          description: The unique identifier for the integration.
        name:
          type: string
          description: The display name of the integration provider.
        logo_url:
          type: string
          description: The logo URL of the integration provider.
        logo_url_dark_mode:
          type: string
          description: The logo URL of the integration provider suitable for dark backgrounds.
          nullable: true
        is_enabled:
          type: boolean
          description: &integration_is_enabled_description |
            Whether or not the integration is enabled.
        auth_scheme:
          type: string
          description: The authentication scheme this integration uses.
          enum: ['oauth2', 'oauth1', 'api_key', 'basic', 'none']
        use_oauth_credentials:
          type: boolean
          description: &integration_use_oauth_credentials_description |
            If true, your application's OAuth credentials will be used instead of Kit's.
        oauth_client_id:
          type: string
          description: &integration_oauth_client_id_description |
            Your application's OAuth Client ID.
          nullable: true
        oauth_client_secret:
          type: string
          description: &integration_oauth_client_secret_description |
            Your application's OAuth Client Secret.
          nullable: true
      required:
        - object
        - slug
        - name
        - logo_url
        - is_enabled
        - auth_scheme
        - use_oauth_credentials
        - oauth_client_id
        - oauth_client_secret
      x-kitMeta:
        name: The integration object
        example: *retrieve_integration_example

    UpdateIntegrationRequest:
      type: object
      additionalProperties: false
      properties:
        is_enabled:
          type: boolean
          description: *integration_is_enabled_description
          nullable: true
        use_oauth_credentials:
          type: boolean
          description: *integration_use_oauth_credentials_description
          nullable: true
        oauth_client_id:
          type: string
          description: *integration_oauth_client_id_description
          nullable: true
        oauth_client_secret:
          type: string
          description: *integration_oauth_client_secret_description
          nullable: true

    ListIntegrationsResponse:
      type: object
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List integrations response object
        group: integrations
        example: *list_integrations_example

    IntegrationSyncObject:
      title: Integration sync
      description: Describes the configuration of a sync model for an integration.
      properties:
        object:
          type: string
          description: The object type, which is always "integration_sync".
          enum: [integration_sync]
        slug:
          type: string
          description: The unique identifier for the integration sync.
        integration_slug:
          type: string
          description: The slug of the integration to which this sync belongs.
        name:
          type: string
          description: The name of the integration sync.
        description:
          type: string
          description: The description of the integration sync.
        is_enabled:
          type: boolean
          description: &integration_sync_is_enabled_description |
            Whether this sync is enabled on the integration.
        auto_start:
          type: boolean
          description: &integration_sync_auto_start_description |
            Whether to automatically start syncing when the account is linked.
        default_frequency:
          type: string
          description: &integration_sync_default_frequency_description |
            The default frequency interval this sync should run at.
        schema:
          type: object
          description: The schema of the sync model.
        excluded_properties:
          type: array
          items:
            type: string
          description: &integration_sync_excluded_properties_description |
            Properties of the schema to exclude from being synced.
      required:
        - object
        - slug
        - integration_slug
        - name
        - description
        - is_enabled
        - auto_start
        - default_frequency
        - schema
        - excluded_properties
      x-kitMeta:
        name: The integration sync object
        example: *retrieve_integration_sync_example

    UpdateIntegrationSyncRequest:
      type: object
      additionalProperties: false
      properties:
        is_enabled:
          type: boolean
          description: *integration_sync_is_enabled_description
          nullable: true
        auto_start:
          type: boolean
          description: *integration_sync_auto_start_description
          nullable: true
        default_frequency:
          type: string
          description: *integration_sync_default_frequency_description
          nullable: true
        excluded_properties:
          type: array
          items:
            type: string
          nullable: true
          description: *integration_sync_excluded_properties_description

    ListIntegrationSyncsResponse:
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationSyncObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List integration syncs response object
        group: integrations
        example: *list_integration_syncs_example

    IntegrationActionObject:
      title: Integration action
      description: Describes the configuration of an action for an integration.
      properties:
        object:
          type: string
          description: The object type, which is always "integration_action".
          enum: [integration_action]
        slug:
          type: string
          description: The unique identifier for the integration action.
        integration_slug:
          type: string
          description: The slug of the integration to which this action belongs.
        name:
          type: string
          description: The name of the integration action.
        description:
          type: string
          description: The description of the integration action.
        is_enabled:
          type: boolean
          description: &integration_action_is_enabled_description |
            Whether this action is enabled on the integration.
        schema:
          type: object
          description: The schema of the action.
      required:
        - object
        - slug
        - integration_slug
        - name
        - description
        - is_enabled
        - schema
      x-kitMeta:
        name: The integration action object
        example: *retrieve_integration_action_example

    UpdateIntegrationActionRequest:
      type: object
      additionalProperties: false
      properties:
        is_enabled:
          type: boolean
          description: *integration_action_is_enabled_description
          nullable: false

    ListIntegrationActionsResponse:
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationActionObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List integration actions response object
        group: integrations
        example: *list_integration_actions_example

    LinkTokenObject:
      title: Link token
      description: Short-lived token used to link an end-user account to an integration.
      properties:
        object:
          type: string
          description: The object type, which is always "link_token".
          enum: [link_token]
        id:
          type: string
          description: The unique identifier for the link token.
        url:
          type: string
          description: The URL that an end-user can use to link their account.
        integration_slug:
          type: string
          description: &link_token_integration_slug_description |
            The slug of the integration to link the end-user's account to.
          nullable: true
        linked_account_id:
          type: string
          description: &link_token_linked_account_id_description |
            If you'd like to re-link an existing linked account, specify the `linked_account_id`.
          nullable: true
        expires_in_mins:
          type: number
          description: &link_token_expires_in_mins_description |
            Number of minutes before the link token expires. Min is `30`, max is `10080`.
          nullable: true
        language:
          type: string
          description: &link_token_language_description |
            The language to render the link flow in. Currently, only `en` is supported.
          enum: [en]
          nullable: true
        redirect_url:
          type: string
          description: &link_token_redirect_url_description |
            The URL to redirect the user back to once the link flow is finished.
          nullable: true
        metadata:
          type: object
          description: &link_token_metadata_description |
            Set of 16 key-value pairs that can be attached to a linked account. This can be useful for storing information such as user IDs, organization details, etc.
          nullable: true
        created_at:
          type: number
          description: The Unix timestamp (in seconds) of when the link token was created.
      required:
        - object
        - id
        - url
        - integration_slug
        - linked_account_id
        - expires_in_mins
        - language
        - redirect_url
        - metadata
        - created_at
      x-kitMeta:
        name: The link token object
        example: *create_link_token_example

    ListLinkTokensResponse:
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/LinkTokenObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List link tokens response object
        group: link-tokens
        example: *list_link_tokens_example

    CreateLinkTokenRequest:
      type: object
      additionalProperties: false
      properties:
        integration_slug:
          type: string
          description: *link_token_integration_slug_description
          nullable: true
        linked_account_id:
          type: string
          description: *link_token_linked_account_id_description
          nullable: true
        expires_in_mins:
          type: number
          description: *link_token_expires_in_mins_description
          nullable: true
        language:
          type: string
          description: *link_token_language_description
          enum: [en]
          nullable: true
        redirect_url:
          type: string
          description: *link_token_redirect_url_description
          nullable: true
        metadata:
          type: object
          description: *link_token_metadata_description
          nullable: true

    DeleteLinkTokenResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum: [link_token.deleted]
      required:
        - id
        - object
        - deleted
