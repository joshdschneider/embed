openapi: 3.0.0
info:
  title: Kit API
  description: The Kit REST API. Please see https://docs.kit.zip/api for more details.
  version: '1.0.0'
  termsOfService: https://kit.zip/policies/terms-of-use
  contact:
    name: Kit Support
    email: support@kit.zip
servers:
  - url: https://api.kit.zip/v1
tags:
  - name: Integrations
    description: Connect your end-users to third-party applications.
  - name: Link tokens
    description: Use link tokens to initiate the link flow for an integration.
  - name: Linked accounts
    description: End-user accounts that are linked to an integration.
  - name: Syncs
    description: Keep data in sync with third-party APIs.
  - name: Queries
    description: Find information across third-party applications.
  - name: Actions
    description: Use actions to interact with third-party APIs.
  - name: Webhooks
    description: Use webhooks to listen for events related to your linked accounts.
paths:
  /integrations:
    get:
      operationId: listIntegrations
      tags:
        - Integrations
      summary: Returns a list of integrations.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
      x-kitMeta:
        name: List integrations
        group: integrations
        returns: A list of [integration](/api/integrations/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/integrations" \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              my_integrations = client.integrations.list()

              print(my_integrations.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const myIntegrations = await kit.integrations.list();

                console.log(myIntegrations.data);
              }

              main();
          response: &list_integrations_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "integration",
                  "name": "github",
                  "display_name": "Github",
                  "logo_url": "https://kit-integrations.s3.amazonaws.com/github.svg",
                  "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/github-dark.svg",
                  "is_enabled": true,
                  "auth_scheme": "oauth2",
                  "use_oauth_credentials": false,
                  "oauth_client_id": null,
                  "oauth_client_secret": null,
                },
                {
                  "object": "integration",
                  "name": "notion",
                  "display_name": "Notion",
                  "logo_url": "https://kit-integrations.s3.amazonaws.com/notion.svg",
                  "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/notion-dark.svg",
                  "is_enabled": true,
                  "auth_scheme": "oauth2",
                  "use_oauth_credentials": false,
                  "oauth_client_id": null,
                  "oauth_client_secret": null,
                },
                {
                  "object": "integration",
                  "name": "slack",
                  "display_name": "Slack",
                  "logo_url": "https://kit-integrations.s3.amazonaws.com/slack.svg",
                  "is_enabled": true,
                  "auth_scheme": "oauth2",
                  "use_oauth_credentials": false,
                  "oauth_client_id": null,
                  "oauth_client_secret": null,
                }
              ]
            }
  /integrations/{integration_name}:
    get:
      operationId: retrieveIntegration
      tags:
        - Integrations
      summary: Retrieves an integration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationObject'
      x-kitMeta:
        name: Retrieve integration
        group: integrations
        returns: The [integration](/api/integrations/object) object matching the specified name.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              integration = client.integrations.retrieve("github")

              print(integration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const integration = await kit.integrations.retrieve("github");

                console.log(integration);
              }

              main();
          response: &retrieve_integration_example |
            {
              "object": "integration",
              "name": "github",
              "display_name": "Github",
              "logo_url": "https://kit-integrations.s3.amazonaws.com/github.svg",
              "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/github-dark.svg",
              "is_enabled": true,
              "auth_scheme": "oauth2",
              "use_oauth_credentials": false,
              "oauth_client_id": null,
              "oauth_client_secret": null,
            }
    post:
      operationId: updateIntegration
      tags:
        - Integration
      summary: Updates an integration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationObject'
      x-kitMeta:
        name: Update integration
        group: integrations
        returns: The updated [integration](/api/integrations/object) object.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{ "is_enabled": false }'
            python: |
              from kit import Kit
              client = Kit()

              updated_integration = client.integrations.update(
                "github",
                { is_enabled: false }
              )

              print(updated_integration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const updatedIntegration = await kit.integrations.update(
                  "github",
                  { is_enabled: false }
                );

                console.log(updatedIntegration);
              }

              main();
          response: |
            {
              "object": "integration",
              "name": "github",
              "display_name": "Github",
              "logo_url": "https://kit-integrations.s3.amazonaws.com/github.svg",
              "logo_url_dark_mode": "https://kit-integrations.s3.amazonaws.com/github-dark.svg",
              "is_enabled": false,
              "auth_scheme": "oauth2",
              "use_oauth_credentials": false,
              "oauth_client_id": null,
              "oauth_client_secret": null,
            }
  /integrations/{integration_name}/sync-configurations:
    get:
      operationId: listSyncConfigurations
      tags:
        - Integrations
      summary: Returns a list of sync configurations for a given integration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to which the sync configurations belong.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSyncConfigurationsResponse'
      x-kitMeta:
        name: List sync configurations
        group: integrations
        returns: A list of [sync configuration](/api/integrations/sync-configurations/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/integrations/github/sync-configurations" \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              sync_configurations = client.integrations.sync_configurations.list(
                "github"
              )

              print(sync_configurations.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const syncConfigurations = await kit.integrations.syncConfigurations.list(
                  "github"
                );

                console.log(syncConfigurations.data);
              }

              main();
          response: &list_sync_configurations_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "sync_configuration",
                  "collection_name": "issues",
                  "integration_name": "github",
                  "is_enabled": true,
                  "default_frequency": "every day",
                  "auto_start": true,
                  "schema": {
                    "title": "Issue",
                    "description": "Issues are used to plan, discuss and track work in a repository.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier of the issue.",
                      },
                      "author": {
                        "type": "string",
                        "description": "The author of the issue.",
                      },
                      // other properties...
                    }
                  },
                  "excluded_properties": [],
                },
                {
                  "object": "sync_configuration",
                  "collection_name": "repositories",
                  "integration_name": "github",
                  "is_enabled": false,
                  "default_frequency": "every day",
                  "auto_start": false,
                  "schema": {
                    "title": "Repository",
                    "description": "A repository contains code, files, and each file's revision history.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier of the repository.",
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the repository.",
                      },
                      // other properties...
                    }
                  },
                  "excluded_properties": [],
                },
              ]
            }
  /integrations/{integration_name}/sync-configurations/{collection_name}:
    get:
      operationId: retrieveSyncConfiguration
      tags:
        - Integrations
      summary: Retrieves a sync configuration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to which the sync configuration belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync configuration.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncConfigurationObject'
      x-kitMeta:
        name: Retrieve sync configuration
        group: integrations
        returns: The [sync configuration](/api/integrations/sync-configurations/object) object matching the specified collection name.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/sync-configurations/issues \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              sync_configuration = client.integrations.sync_configurations.retrieve(
                "github",
                "issues"
              )

              print(sync_configuration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const syncConfiguration = await kit.integrations.syncConfigurations.retrieve(
                  "github"
                  "issues"
                );

                console.log(syncConfiguration);
              }

              main();
          response: &retrieve_sync_configuration_example |
            {
              "object": "sync_configuration",
              "collection_name": "issues",
              "integration_name": "github",
              "is_enabled": true,
              "default_frequency": "every day",
              "auto_start": true,
              "schema": {
                "title": "Issue",
                "description": "Issues are used to plan, discuss and track work in a repository.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier of the issue.",
                  },
                  "author": {
                    "type": "string",
                    "description": "The author of the issue.",
                  },
                  // other properties...
                }
              },
              "excluded_properties": [],
            }
    post:
      operationId: updateSyncConfiguration
      tags:
        - Integrations
      summary: Updates a sync configuration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to which the sync configuration belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSyncConfigurationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncConfigurationObject'
      x-kitMeta:
        name: Update sync configuration
        group: integrations
        returns: The [sync configuration](/api/integrations/sync-configurations/object) object matching the specified collection name.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/sync-configurations/repositories \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{
                    "is_enabled": true,
                    "default_frequency": "every 2 weeks",
                  }'
            python: |
              from kit import Kit
              client = Kit()

              sync_configuration = client.integrations.sync_configurations.update(
                "github",
                "repositories",
                {
                  "is_enabled": true,
                  "default_frequency": "every 2 weeks",
                }
              )

              print(sync_configuration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const syncConfiguration = await kit.integrations.syncConfigurations.update(
                  "github"
                  "repositories",
                  {
                    "is_enabled": true,
                    "default_frequency": "every 2 weeks",
                  }
                );

                console.log(syncConfiguration);
              }

              main();
          response: |
            {
              "object": "sync_configuration",
              "collection_name": "repositories",
              "integration_name": "github",
              "is_enabled": true,
              "default_frequency": "every 2 weeks",
              "auto_start": false,
              "schema": {
                "title": "Repository",
                "description": "A repository contains code, files, and each file's revision history.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier of the repository.",
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the repository.",
                  },
                  // other properties...
                }
              },
              "excluded_properties": [],
            }
  /integrations/{integration_name}/action-configurations:
    get:
      operationId: listActionConfigurations
      tags:
        - Integrations
      summary: Returns a list of action configurations for a given integration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to which the action configurations belong.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActionConfigurationsResponse'
      x-kitMeta:
        name: List action configurations
        group: integrations
        returns: A list of [action configuration](/api/integrations/action-configurations/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/integrations/github/action-configurations" \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              action_configurations = client.integrations.action_configurations.list(
                "github"
              )

              print(action_configurations.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const actionConfigurations = await kit.integrations.actionConfigurations.list(
                  "github"
                );

                console.log(actionConfigurations.data);
              }

              main();
          response: &list_action_configurations_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "action_configuration",
                  "action_name": "create-repository",
                  "integration_name": "github",
                  "is_enabled": true,
                  "schema": {
                    "title": "Create repository",
                    "description": "Create a new Github repository.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the repository.",
                        "required": true,
                      },
                      "description": {
                        "type": "string",
                        "description": "A short description of the repository.",
                      },
                      // other properties...
                    }
                  },
                },
                {
                  "object": "action_configuration",
                  "action_name": "write-file",
                  "integration_name": "github",
                  "is_enabled": false,
                  "schema": {
                    "title": "Write file",
                    "description": "Create or update a file in a Github repository.",
                    "properties": {
                      "repo": {
                        "type": "string",
                        "description": "The name of the repository without the .git extension.",
                        "required": true,
                      },
                      "path": {
                        "type": "string",
                        "description": "The file path.",
                        "required": true,
                      },
                      // other properties...
                    }
                  },
                },
              ]
            }
  /integrations/{integration_name}/action-configurations/{action_name}:
    get:
      operationId: retrieveActionConfiguration
      tags:
        - Integrations
      summary: Retrieves an action configuration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to which the action configuration belongs.
        - in: path
          name: action_name
          required: true
          schema:
            type: string
          description: The unique name of the action.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionConfigurationObject'
      x-kitMeta:
        name: Retrieve action configuration
        group: integrations
        returns: The [action configuration](/api/integrations/action-configurations/object) object matching the specified name.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/action-configurations/create-repository \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              action_configuration = client.integrations.action_configurations.retrieve(
                "github",
                "create-repository"
              )

              print(action_configuration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const actionConfiguration = await kit.integrations.actionConfigurations.retrieve(
                  "github"
                  "create-repository"
                );

                console.log(actionConfiguration);
              }

              main();
          response: &retrieve_action_configuration_example |
            {
              "object": "action_configuration",
              "action_name": "create-repository",
              "integration_name": "github",
              "is_enabled": true,
              "schema": {
                "title": "Create repository",
                "description": "Create a new Github repository.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository.",
                    "required": true,
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository.",
                  },
                  // other properties...
                }
              },
            }
    post:
      operationId: updateActionConfiguration
      tags:
        - Integrations
      summary: Updates an action configuration.
      parameters:
        - in: path
          name: integration_name
          required: true
          schema:
            type: string
          description: The unique name of the integration to which the action configuration belongs.
        - in: path
          name: action_name
          required: true
          schema:
            type: string
          description: The unique name of the action.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActionConfigurationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionConfigurationObject'
      x-kitMeta:
        name: Update action configuration
        group: integrations
        returns: The [action configuration](/api/integrations/action-configurations/object) object matching the specified name.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/integrations/github/action-configurations/write-file \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{ "is_enabled": true }'
            python: |
              from kit import Kit
              client = Kit()

              action_configuration = client.integrations.action_configurations.update(
                "github",
                "write-file",
                { "is_enabled": true }
              )

              print(action_configuration)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const actionConfiguration = await kit.integrations.actionConfigurations.update(
                  "github"
                  "write-file",
                  { "is_enabled": true }
                );

                console.log(actionConfiguration);
              }

              main();
          response: |
            {
              "object": "action_configuration",
              "action_name": "write-file",
              "integration_name": "github",
              "is_enabled": true,
              "schema": {
                "title": "Write file",
                "description": "Create or update a file in a Github repository.",
                "properties": {
                  "repo": {
                    "type": "string",
                    "description": "The name of the repository without the .git extension.",
                    "required": true,
                  },
                  "path": {
                    "type": "string",
                    "description": "The file path.",
                    "required": true,
                  },
                  // other properties...
                }
              },
            }
  /link-tokens:
    get:
      operationId: listLinkTokens
      tags:
        - Link tokens
      summary: Returns a list of link tokens.
      parameters:
        - name: limit
          in: query
          description: &pagination_limit_param_description |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: &pagination_order_param_description |
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
          schema:
            type: string
            default: desc
            enum: ['asc', 'desc']
        - name: after
          in: query
          description: &pagination_after_param_description |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          description: &pagination_before_param_description |
            A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLinkTokensResponse'
      x-kitMeta:
        name: List link tokens
        group: link-tokens
        returns: A list of [link token](/api/link-tokens/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/link-tokens?order=desc&limit=20" \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              my_link_tokens = client.link_tokens.list(
                order="desc",
                limit="20",
              )

              print(my_link_tokens.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const myLinkTokens = await kit.linkTokens.list({
                  order: "desc",
                  limit: "20",
                });

                console.log(myLinkTokens.data);
              }

              main();
          response: &list_link_tokens_example |
            {
              "object": "list",
              "data": [
                {
                  "object": "link_token",
                  "id": "tok_1NG8Du2eZvKYlo2CUI79vXWy",
                  "url": "https://api.kit.zip/link/tok_1NG8Du2eZvKYlo2CUI79vXWy"
                  "integration_name": "github",
                  "linked_account_id": null,
                  "expires_in_mins": 60,
                  "language": "en",
                  "redirect_url": "https://piperchat.com/integrations/callback",
                  "metadata": { 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
                  "created_at": 1708387617,
                },
                {
                  "object": "link_token",
                  "id": "tok_3MtwBwLkdIwHu7ix28a3tqPa",
                  "url": "https://api.kit.zip/link/tok_3MtwBwLkdIwHu7ix28a3tqPa",
                  "integration_name": null,
                  "linked_account_id": null,
                  "expires_in_mins": 180,
                  "language": "en",
                  "redirect_url": null,
                  "metadata": {},
                  "created_at": 1708388119,
                },
                {
                  "object": "link_token",
                  "id": "tok_1Mm8s8LkdIwHu7ix0OXBfTRG",
                  "url": "https://api.kit.zip/link/tok_1Mm8s8LkdIwHu7ix0OXBfTRG",
                  "integration_name": "zendesk",
                  "linked_account_id": null,
                  "expires_in_mins": 30,
                  "language": "en",
                  "redirect_url": null,
                  "metadata": {},
                  "created_at": 1708388447,
                }
              ],
              "first_id": "tok_1NG8Du2eZvKYlo2CUI79vXWy",
              "last_id": "tok_1Mm8s8LkdIwHu7ix0OXBfTRG",
              "has_more": false
            }
    post:
      operationId: createLinkToken
      tags:
        - Link token
      summary: Create a link token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkTokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTokenObject'
      x-kitMeta:
        name: Create link token
        group: link-tokens
        returns: A [link token](/api/link-token/object) object.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/link-tokens" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{
                  "integration_name": "slack",
                  "expires_in_mins": 30,
                  "redirect_url": "https://piperchat.com/integrations/callback",
                  "metadata": { 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
                }'
            python: |
              from kit import Kit
              client = Kit()

              link_token = client.link_tokens.create(
                  integration_name="slack",
                  expires_in_mins=30,
                  redirect_url="https://piperchat.com/integrations/callback",
                  metadata={ 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
              )

              print(link_token)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const linkToken = await kit.linkTokens.create({
                  "integration_name": "slack",
                  "expires_in_mins": 30,
                  "redirect_url": "https://piperchat.com/integrations/callback",
                  "metadata": { 
                    "piperchat_id": "26106b1f16fed8639d878"
                  },
                });

                console.log(linkToken);
              }

              main();
          response: &create_link_token_example |
            {
              "object": "link_token",
              "id": "tok_29Y8Du2eZvKYlo2CUI79vXWy",
              "url": "https://api.kit.zip/link/tok_29Y8Du2eZvKYlo2CUI79vXWy"
              "integration_name": "slack",
              "linked_account_id": null,
              "expires_in_mins": 30,
              "language": "en",
              "redirect_url": "https://piperchat.com/integrations/callback",
              "metadata": { 
                "piperchat_id": "26106b1f16fed8639d878"
              },
              "created_at": 1708387618,
            }
  /link-tokens/{link_token_id}:
    get:
      operationId: retrieveLinkToken
      tags:
        - Link tokens
      summary: Retrieves a link token.
      parameters:
        - in: path
          name: link_token_id
          required: true
          schema:
            type: string
          description: The ID of the link token to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTokenObject'
      x-kitMeta:
        name: Retrieve link token
        group: link-tokens
        returns: The [link token](/api/link-tokens/object) object matching the specified ID.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/link-tokens/tok_29Y8Du2eZvKYlo2CUI79vXWy \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              link_token = client.link_tokens.retrieve("tok_29Y8Du2eZvKYlo2CUI79vXWy")

              print(link_token)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const linkToken = await kit.linkTokens.retrieve("tok_29Y8Du2eZvKYlo2CUI79vXWy");

                console.log(linkToken);
              }

              main();
          response: *create_link_token_example
    delete:
      operationId: deleteLinkToken
      tags:
        - Link tokens
      summary: Deletes a link token.
      parameters:
        - in: path
          name: link_token_id
          required: true
          schema:
            type: string
          description: The ID of the link token to delete.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLinkTokenResponse'
      x-kitMeta:
        name: Delete link token
        group: link-tokens
        returns: Deletion status
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/link-tokens/tok_29Y8Du2eZvKYlo2CUI79vXWy \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -X DELETE
            python: |
              from kit import Kit
              client = Kit()

              response = client.link_tokens.delete("tok_29Y8Du2eZvKYlo2CUI79vXWy")

              print(response)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const response = await kit.linkTokens.delete("tok_29Y8Du2eZvKYlo2CUI79vXWy");

                console.log(response);
              }

              main();
          response: |
            {
              "id": "tok_29Y8Du2eZvKYlo2CUI79vXWy",
              "object": "link_token.deleted",
              "deleted": true
            }
  /linked-accounts:
    get:
      operationId: listLinkedAccounts
      tags:
        - Linked accounts
      summary: Returns a list of linked accounts.
      parameters:
        - name: limit
          in: query
          description: *pagination_limit_param_description
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: *pagination_order_param_description
          schema:
            type: string
            default: desc
            enum: ['asc', 'desc']
        - name: after
          in: query
          description: *pagination_after_param_description
          schema:
            type: string
        - name: before
          in: query
          description: *pagination_before_param_description
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLinkedAccountsResponse'
      x-kitMeta:
        name: List linked accounts
        group: linked-accounts
        returns: A list of [linked account](/api/linked-accounts/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/linked-accounts?order=desc&limit=20" \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              my_linked_accounts = client.linked_accounts.list(
                order="desc",
                limit="20",
              )

              print(my_linked_accounts.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const myLinkedAccounts = await kit.linkedAccounts.list({
                  order: "desc",
                  limit: "20",
                });

                console.log(myLinkedAccounts.data);
              }

              main();
          response: &list_linked_accounts_example |
            {
              "object": "list",
              "data": [
                {
                  "id": "link_1MvojA2eZvKYlo2CvqTABjZs",
                  "object": "linked_account",
                  "integration_name": "shopify",
                  "configuration": {
                    "subdomain": "allbirds"
                  },
                  "metadata": {},
                  "created_at": 1708446144,
                  "updated_at": 1708446144,
                },
                {
                  "id": "link_3MtwBwLkdIwHu7ix28a3tqPa",
                  "object": "linked_account",
                  "integration_name": "slack",
                  "configuration": {},
                  "metadata": {
                    "piperchat_id": 1209357298,
                    "piperchat_org": "Acme"
                  },
                  "created_at": 1708446144,
                  "updated_at": 1708446144,
                },
                {
                  "id": "link_1ErTsH2eZvKYlo2CI7ukcoF7",
                  "object": "linked_account",
                  "integration_name": "google-drive",
                  "configuration": {},
                  "metadata": {
                    "internal_id": 1209357298,
                  },
                  "created_at": 1708446144,
                  "updated_at": 1708446144,
                }
              ],
              "first_id": "link_1MvojA2eZvKYlo2CvqTABjZs",
              "last_id": "link_1ErTsH2eZvKYlo2CI7ukcoF7",
              "has_more": false
            }
  /linked-accounts/{linked_account_id}:
    get:
      operationId: retrieveLinkedAccount
      tags:
        - Linked accounts
      summary: Retrieves a linked account.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedAccountObject'
      x-kitMeta:
        name: Retrieve linked account
        group: linked-accounts
        returns: The [linked account](/api/linked-accounts/object) object matching the specified ID.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              linked_account = client.linked_accounts.retrieve("link_1MvojA2eZvKYlo2CvqTABjZs")

              print(linked_account)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const linkedAccount = await kit.linkedAccounts.retrieve("link_1MvojA2eZvKYlo2CvqTABjZs");

                console.log(linkedAccount);
              }

              main();
          response: &retrieve_linked_account_example |
            {
              "id": "link_1MvojA2eZvKYlo2CvqTABjZs",
              "object": "linked_account",
              "integration_name": "shopify",
              "configuration": {
                "subdomain": "allbirds"
              },
              "metadata": {},
              "created_at": 1708446144,
              "updated_at": 1708446144,
            }
    post:
      operationId: updateLinkedAccount
      tags:
        - Linked account
      summary: Updates a linked account.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLinkedAccountRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedAccountObject'
      x-kitMeta:
        name: Update linked account
        group: linked-accounts
        returns: The updated [linked account](/api/linked-accounts/object) object.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{
                    "metadata": {
                      "internal_id": 309485029539,
                      "internal_organization": "Allbirds, Inc."
                    }
                  }'
            python: |
              from kit import Kit
              client = Kit()

              updated_linked_account = client.linked_accounts.update(
                "link_1MvojA2eZvKYlo2CvqTABjZs",
                { 
                  "metadata": {
                    "internal_id": 309485029539,
                    "internal_organization": "Allbirds, Inc."
                  }
                }
              )

              print(updated_linked_account)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const updatedLinkedAccount = await kit.linkedAccount.update(
                  "link_1MvojA2eZvKYlo2CvqTABjZs",
                  { 
                    "metadata": {
                      "internal_id": 309485029539,
                      "internal_organization": "Allbirds, Inc."
                    }
                  }
                );

                console.log(updatedLinkedAccount);
              }

              main();
          response: |
            {
              "id": "link_1MvojA2eZvKYlo2CvqTABjZs",
              "object": "linked_account",
              "integration_name": "shopify",
              "configuration": {
                "subdomain": "allbirds"
              },
              "metadata": {
                "internal_id": 309485029539,
                "internal_organization": "Allbirds, Inc."
              },
              "created_at": 1708446144,
              "updated_at": 1708446144,
            }
    delete:
      operationId: deleteLinkedAccount
      tags:
        - Linked account
      summary: Deletes a linked account.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to delete.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLinkedAccountResponse'
      x-kitMeta:
        name: Delete linked account
        group: linked-accounts
        returns: Deletion status
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -X DELETE
            python: |
              from kit import Kit
              client = Kit()

              response = client.linked_accounts.delete("link_1MvojA2eZvKYlo2CvqTABjZs")

              print(response)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const response = await kit.linkedAccounts.delete("link_1MvojA2eZvKYlo2CvqTABjZs");

                console.log(response);
              }

              main();
          response: |
            {
              "id": "link_1MvojA2eZvKYlo2CvqTABjZs",
              "object": "linked_account.deleted",
              "deleted": true
            }
  /linked-accounts/{linked_account_id}/syncs:
    get:
      operationId: listSyncs
      tags:
        - Syncs
      summary: Returns a list of syncs for a given linked account.
      parameters:
        - name: linked_account_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the linked account to which the syncs belong.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSyncsResponse'
      x-kitMeta:
        name: List syncs
        group: syncs
        returns: A list of [sync](/api/syncs/object) objects.
        examples:
          request:
            curl: |
              curl "https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs/syncs" \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              syncs = client.linked_accounts.syncs.list(
                "link_3KvojA2eZvKYlo2CvqTABjZs"
              )

              print(syncs.data)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const syncs = await kit.linkedAccounts.syncs.list(
                  "link_3KvojA2eZvKYlo2CvqTABjZs"
                );

                console.log(syncs.data);
              }

              main();
          response: &list_syncs_example |
            {
              "object": "list",
              "data": [
                {
                  "collection_name": "issues",
                  "integration_name": "github",
                  "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
                  "frequency": "every day",
                  "status": "running",
                  "last_synced_at": 1708446145,
                  "next_sync_at": 1708532545,
                },
                {
                  "collection_name": "repositories",
                  "integration_name": "github",
                  "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
                  "frequency": "every 3 days",
                  "status": "stopped",
                  "last_synced_at": 1708446144,
                  "next_sync_at": null,
                }
              ]
            }
  /linked-accounts/{linked_account_id}/syncs/{collection_name}:
    get:
      operationId: retrieveSync
      tags:
        - Syncs
      summary: Retrieves a sync.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to which the sync belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncObject'
      x-kitMeta:
        name: Retrieve sync
        group: syncs
        returns: The [sync](/api/syncs/object) object matching the specified collection name.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_3KvojA2eZvKYlo2CvqTABjZs/syncs/issues \
                -H "Authorization: Bearer $KIT_API_KEY"
            python: |
              from kit import Kit
              client = Kit()

              sync = client.linked_accounts.syncs.retrieve(
                "link_3KvojA2eZvKYlo2CvqTABjZs",
                "issues"
              )

              print(sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const sync = await kit.linkedAccounts.syncs.retrieve(
                  "link_1MvojA2eZvKYlo2CvqTABjZs",
                  "issues"
                );

                console.log(sync);
              }

              main();
          response: &retrieve_sync_example |
            {
              "collection_name": "issues",
              "integration_name": "github",
              "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
              "frequency": "every day",
              "status": "running",
              "last_synced_at": 1708446145,
              "next_sync_at": 1708532545,
            }
    post:
      operationId: updateSync
      tags:
        - Syncs
      summary: Updates a sync.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to which the sync belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSyncRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncObject'
      x-kitMeta:
        name: Update sync
        group: syncs
        returns: The updated [sync](/api/syncs/object) object.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs/syncs/issues \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -d '{ "frequency": "every 2 weeks" }'
            python: |
              from kit import Kit
              client = Kit()

              updated_sync = client.linked_accounts.syncs.update(
                "link_1MvojA2eZvKYlo2CvqTABjZs",
                { "frequency": "every 2 weeks" }
              )

              print(updated_sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const updatedSync = await kit.linkedAccount.syncs.update(
                  "link_1MvojA2eZvKYlo2CvqTABjZs",
                  { "frequency": "every 2 weeks" }
                );

                console.log(updatedSync);
              }

              main();
          response: |
            {
              "collection_name": "issues",
              "integration_name": "github",
              "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
              "frequency": "every 2 weeks",
              "status": "running",
              "last_synced_at": 1708446145,
              "next_sync_at": 1708532545,
            }
  /linked-accounts/{linked_account_id}/syncs/{collection_name}/trigger:
    post:
      operationId: triggerSync
      tags:
        - Syncs
      summary: Triggers a one-off sync.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to which the sync belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync to trigger.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncObject'
      x-kitMeta:
        name: Trigger sync
        group: syncs
        returns: The [sync](/api/syncs/object) object that was triggered.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs/syncs/issues \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -X POST
            python: |
              from kit import Kit
              client = Kit()

              triggered_sync = client.linked_accounts.syncs.trigger(
                "link_1MvojA2eZvKYlo2CvqTABjZs",
                "issues"
              )

              print(triggered_sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const triggeredSync = await kit.linkedAccount.syncs.trigger(
                  "link_1MvojA2eZvKYlo2CvqTABjZs",
                  "issues"
                );

                console.log(triggeredSync);
              }

              main();
          response: |
            {
              "collection_name": "issues",
              "integration_name": "github",
              "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
              "frequency": "every 2 weeks",
              "status": "running",
              "last_synced_at": 1708542947,
              "next_sync_at": 1709752547,
            }
  /linked-accounts/{linked_account_id}/syncs/{collection_name}/stop:
    post:
      operationId: stopSync
      tags:
        - Syncs
      summary: Stop a sync indefinitely.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to which the sync belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync to stop.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncObject'
      x-kitMeta:
        name: Stop sync
        group: syncs
        returns: The [sync](/api/syncs/object) object that was stopped.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs/syncs/issues/stop \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -X POST
            python: |
              from kit import Kit
              client = Kit()

              stopped_sync = client.linked_accounts.syncs.stop(
                "link_1MvojA2eZvKYlo2CvqTABjZs",
                "issues"
              )

              print(stopped_sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const stoppedSync = await kit.linkedAccount.syncs.stop(
                  "link_1MvojA2eZvKYlo2CvqTABjZs",
                  "issues"
                );

                console.log(stoppedSync);
              }

              main();
          response: |
            {
              "collection_name": "issues",
              "integration_name": "github",
              "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
              "frequency": "every 2 weeks",
              "status": "stopped",
              "last_synced_at": 1708542947,
              "next_sync_at": 1709752547,
            }
  /linked-accounts/{linked_account_id}/syncs/{collection_name}/start:
    post:
      operationId: startSync
      tags:
        - Syncs
      summary: Start a stopped sync.
      parameters:
        - in: path
          name: linked_account_id
          required: true
          schema:
            type: string
          description: The ID of the linked account to which the sync belongs.
        - in: path
          name: collection_name
          required: true
          schema:
            type: string
          description: The unique collection name of the sync to start.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncObject'
      x-kitMeta:
        name: Start sync
        group: syncs
        returns: The [sync](/api/syncs/object) object that was started.
        examples:
          request:
            curl: |
              curl https://api.kit.zip/v1/linked-accounts/link_1MvojA2eZvKYlo2CvqTABjZs/syncs/issues/start \
                -H "Authorization: Bearer $KIT_API_KEY" \
                -X POST
            python: |
              from kit import Kit
              client = Kit()

              started_sync = client.linked_accounts.syncs.start(
                "link_1MvojA2eZvKYlo2CvqTABjZs",
                "issues"
              )

              print(started_sync)
            node.js: |-
              import Kit from "@kit/node";

              const kit = new Kit();

              async function main() {
                const startedSync = await kit.linkedAccount.syncs.start(
                  "link_1MvojA2eZvKYlo2CvqTABjZs",
                  "issues"
                );

                console.log(startedSync);
              }

              main();
          response: |
            {
              "collection_name": "issues",
              "integration_name": "github",
              "linked_account_id": "link_3KvojA2eZvKYlo2CvqTABjZs",
              "frequency": "every 2 weeks",
              "status": "running",
              "last_synced_at": 1708542947,
              "next_sync_at": 1709752547,
            }

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: 'bearer'

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        type:
          type: string
        message:
          type: string
          nullable: true
      required:
        - code
        - type
        - message

    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
        - error

    IntegrationObject:
      title: Integration
      description: Describes a connection between your application and a third-party platform.
      properties:
        object:
          type: string
          description: The object type, which is always "integration".
          enum: [integration]
        name:
          type: string
          description: The unique name of the integration.
        display_name:
          type: string
          description: The display name of the integration.
        logo_url:
          type: string
          description: The logo URL of the integration.
        logo_url_dark_mode:
          type: string
          description: The logo URL of the integration suitable for dark backgrounds.
        is_enabled:
          type: boolean
          description: &integration_is_enabled_description |
            Whether or not the integration is enabled.
        auth_scheme:
          type: string
          description: The authentication scheme this integration uses.
          enum: ['oauth2', 'oauth1', 'api_key', 'basic', 'none']
        use_oauth_credentials:
          type: boolean
          description: &integration_use_oauth_credentials_description |
            If true, your application's OAuth credentials will be used instead of Kit's.
        oauth_client_id:
          type: string
          description: &integration_oauth_client_id_description |
            Your application's OAuth Client ID.
          nullable: true
        oauth_client_secret:
          type: string
          description: &integration_oauth_client_secret_description |
            Your application's OAuth Client Secret.
          nullable: true
      required:
        - object
        - name
        - display_name
        - logo_url
        - is_enabled
        - auth_scheme
        - use_oauth_credentials
        - oauth_client_id
        - oauth_client_secret
      x-kitMeta:
        name: The integration object
        example: *retrieve_integration_example

    UpdateIntegrationRequest:
      type: object
      additionalProperties: false
      properties:
        is_enabled:
          type: boolean
          description: *integration_is_enabled_description
        use_oauth_credentials:
          type: boolean
          description: *integration_use_oauth_credentials_description
        oauth_client_id:
          type: string
          description: *integration_oauth_client_id_description
          nullable: true
        oauth_client_secret:
          type: string
          description: *integration_oauth_client_secret_description
          nullable: true

    ListIntegrationsResponse:
      type: object
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List integrations response object
        group: integrations
        example: *list_integrations_example

    SyncConfigurationObject:
      title: Sync configuration
      description: Describes the configuration of a sync on an [integration](/api/integrations).
      properties:
        object:
          type: string
          description: The object type, which is always "sync_configuration".
          enum: [sync_configuration]
        collection_name:
          type: string
          description: The unique collection name of the sync.
        integration_name:
          type: string
          description: The unique name of the integration to which the sync belongs.
        is_enabled:
          type: boolean
          description: &sync_configuration_is_enabled_description |
            Whether this sync is enabled on the integration.
        default_frequency:
          type: string
          description: &sync_configuration_default_frequency_description |
            The default frequency interval this sync should run at.
        auto_start:
          type: boolean
          description: &sync_configuration_auto_start_description |
            Whether to automatically start syncing when the account is linked.
        schema:
          type: object
          description: The schema of the collection to sync.
        excluded_properties:
          type: array
          items:
            type: string
          description: &sync_configuration_excluded_properties_description |
            Properties on the schema to exclude from being synced.
      required:
        - object
        - collection_name
        - integration_name
        - is_enabled
        - auto_start
        - default_frequency
        - schema
        - excluded_properties
      x-kitMeta:
        name: The sync configuration object
        example: *retrieve_sync_configuration_example

    UpdateSyncConfigurationRequest:
      type: object
      additionalProperties: false
      properties:
        is_enabled:
          type: boolean
          description: *sync_configuration_is_enabled_description
        auto_start:
          type: boolean
          description: *sync_configuration_auto_start_description
        default_frequency:
          type: string
          description: *sync_configuration_default_frequency_description
        excluded_properties:
          type: array
          items:
            type: string
          description: *sync_configuration_excluded_properties_description

    ListSyncConfigurationsResponse:
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/SyncConfigurationObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List sync configurations response object
        group: integrations
        example: *list_sync_configurations_example

    ActionConfigurationObject:
      title: Action configuration
      description: Describes the configuration of an action on an [integration](/api/integrations).
      properties:
        object:
          type: string
          description: The object type, which is always "action_configuration".
          enum: [action_configuration]
        action_name:
          type: string
          description: The unique name of the action.
        integration_name:
          type: string
          description: The unique name of the integration to which this action configuration belongs.
        is_enabled:
          type: boolean
          description: &action_configuration_is_enabled_description |
            Whether this action is enabled on the integration.
        schema:
          type: object
          description: The schema of the action.
      required:
        - object
        - action_name
        - integration_name
        - is_enabled
        - schema
      x-kitMeta:
        name: The action configuration object
        example: *retrieve_action_configuration_example

    UpdateActionConfigurationRequest:
      type: object
      additionalProperties: false
      properties:
        is_enabled:
          type: boolean
          description: *action_configuration_is_enabled_description

    ListActionConfigurationsResponse:
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/ActionConfigurationObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List action configurations response object
        group: integrations
        example: *list_action_configurations_example

    LinkTokenObject:
      title: Link token
      description: Short-lived token used to link an end-user account to an integration.
      properties:
        object:
          type: string
          description: The object type, which is always "link_token".
          enum: [link_token]
        id:
          type: string
          description: The unique identifier for the link token.
        url:
          type: string
          description: The URL that an end-user can use to link their account.
        integration_name:
          type: string
          description: &link_token_integration_name_description |
            The unique name of the integration to link the end-user's account to.
          nullable: true
        linked_account_id:
          type: string
          description: &link_token_linked_account_id_description |
            If you'd like to re-link an existing linked account, specify the `linked_account_id`.
          nullable: true
        expires_in_mins:
          type: number
          description: &link_token_expires_in_mins_description |
            Number of minutes before the link token expires. Min is `30`, max is `10080`.
        language:
          type: string
          description: &link_token_language_description |
            The language to render the link flow in. Currently, only `en` is supported.
          enum: [en]
        redirect_url:
          type: string
          description: &link_token_redirect_url_description |
            The URL to redirect the user back to once the link flow is finished.
          nullable: true
        metadata:
          type: object
          description: &link_token_metadata_description |
            Set of 16 key-value pairs that can be attached to a linked account. This can be useful for storing information such as user IDs, organization details, etc.
          nullable: true
        created_at:
          type: number
          description: The Unix timestamp (in seconds) of when the link token was created.
      required:
        - object
        - id
        - url
        - integration_name
        - linked_account_id
        - expires_in_mins
        - language
        - redirect_url
        - metadata
        - created_at
      x-kitMeta:
        name: The link token object
        example: *create_link_token_example

    ListLinkTokensResponse:
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/LinkTokenObject'
        first_id:
          type: string
          example: 'tok_1JvojA2eZvKYlo2CvqTABjZs'
        last_id:
          type: string
          example: 'tok_2LrTsH2eZvKYlo2CI7ukcoF7'
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      x-kitMeta:
        name: List link tokens response object
        group: link-tokens
        example: *list_link_tokens_example

    CreateLinkTokenRequest:
      type: object
      additionalProperties: false
      properties:
        integration_name:
          type: string
          description: *link_token_integration_name_description
        linked_account_id:
          type: string
          description: *link_token_linked_account_id_description
        expires_in_mins:
          type: number
          description: *link_token_expires_in_mins_description
        language:
          type: string
          description: *link_token_language_description
          enum: [en]
        redirect_url:
          type: string
          description: *link_token_redirect_url_description
        metadata:
          type: object
          description: *link_token_metadata_description

    DeleteLinkTokenResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum: [link_token.deleted]
      required:
        - id
        - object
        - deleted

    LinkedAccountObject:
      title: Linked account
      description: The end-user account that's linked to an integration.
      properties:
        object:
          type: string
          description: The object type, which is always "linked_account".
          enum: [linked_account]
        id:
          type: string
          description: The unique identifier for the linked account.
        integration_name:
          type: string
          description: The unique name of the integration to which this account is linked.
        configuration:
          type: object
          description: Account-specific configuration for the authorization flow.
          nullable: true
        metadata:
          type: object
          description: *link_token_metadata_description
          nullable: true
        created_at:
          type: number
          description: The Unix timestamp (in seconds) of when the link token was created.
        updated_at:
          type: number
          description: The Unix timestamp (in seconds) of when the link token was updated.
      required:
        - object
        - id
        - integration_name
        - configuration
        - metadata
        - created_at
        - updated_at
      x-kitMeta:
        name: The linked account object
        example: *retrieve_linked_account_example

    ListLinkedAccountsResponse:
      type: object
      properties:
        object:
          type: string
          example: 'list'
        data:
          type: array
          items:
            $ref: '#/components/schemas/LinkedAccountObject'
        first_id:
          type: string
          example: 'link_1MvojA2eZvKYlo2CvqTABjZs'
        last_id:
          type: string
          example: 'link_1ErTsH2eZvKYlo2CI7ukcoF7'
        has_more:
          type: boolean
          example: false
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      x-kitMeta:
        name: List linked accounts response object
        group: linked-accounts
        example: *list_linked_accounts_example

    UpdateLinkedAccountRequest:
      type: object
      additionalProperties: false
      properties:
        metadata:
          type: object
          description: *link_token_metadata_description
          nullable: true

    DeleteLinkedAccountResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum: [linked_account.deleted]
      required:
        - id
        - object
        - deleted

    SyncObject:
      title: Sync
      description: Represents the syncing of a collection on a linked account.
      properties:
        object:
          type: string
          description: The object type, which is always "sync".
          enum: [sync]
        collection_name:
          type: string
          description: The unique collection name of the sync.
        integration_name:
          type: string
          description: The unique name of the integration to which this sync belongs.
        linked_account_id:
          type: string
          description: The ID of the linked account to which this sync belongs.
        frequency:
          type: string
          description: &sync_frequency_description |
            The frequency interval this sync runs at.
        status:
          type: string
          description: The status of the sync.
          enum: [running, stopped, success, error]
        last_synced_at:
          type: number
          description: The Unix timestamp (in seconds) of the last sync.
          nullable: true
        next_sync_at:
          type: number
          description: The Unix timestamp (in seconds) of the last sync.
          nullable: true
      required:
        - object
        - collection_name
        - integration_name
        - linked_account_id
        - frequency
        - status
        - last_synced_at
        - next_sync_at
      x-kitMeta:
        name: The sync object
        example: *retrieve_sync_example

    ListSyncsResponse:
      type: object
      properties:
        object:
          type: string
          example: 'list'
        data:
          type: array
          items:
            $ref: '#/components/schemas/SyncObject'
      required:
        - object
        - data
      x-kitMeta:
        name: List syncs response object
        group: syncs
        example: *list_syncs_example

    UpdateSyncRequest:
      type: object
      additionalProperties: false
      properties:
        frequency:
          type: string
          description: *sync_frequency_description
