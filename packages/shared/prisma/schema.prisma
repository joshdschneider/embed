generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id
  email               String
  first_name          String?
  last_name           String?
  email_subscriptions String[]
  created_at          Int
  updated_at          Int
  deleted_at          Int?

  organization_memberships OrganizationMembership[]
}

model Organization {
  id         String @id
  name       String
  stripe_id  String
  created_at Int
  updated_at Int
  deleted_at Int?

  environments    Environment[]
  memberships     OrganizationMembership[]
  subscriptions   Subscription[]
  payment_methods PaymentMethod[]
}

model OrganizationMembership {
  id              String  @id
  organization_id String
  user_id         String
  role            String?
  created_at      Int
  updated_at      Int

  organization Organization @relation(fields: [organization_id], references: [id])
  user         User         @relation(fields: [user_id], references: [id])
}

model Subscription {
  id              String @id
  organization_id String
  stripe_id       String
  name            String
  status          String
  plan            String
  price_ids       Json
  created_at      Int
  updated_at      Int

  organization Organization @relation(fields: [organization_id], references: [id])
}

model PaymentMethod {
  id              String  @id
  organization_id String
  stripe_id       String
  type            String
  card_brand      String?
  card_last4      String?
  card_exp_month  Int?
  card_exp_year   Int?
  created_at      Int
  updated_at      Int

  organization Organization @relation(fields: [organization_id], references: [id])
}

model Environment {
  id                                 String  @id
  organization_id                    String
  type                               String
  auto_enable_collections            Boolean
  auto_enable_actions                Boolean
  auto_start_syncs                   Boolean
  default_sync_frequency             String
  default_text_embedding_model       String
  default_multimodal_embedding_model String
  branding                           Json
  locked                             Boolean
  locked_reason                      String?
  created_at                         Int
  updated_at                         Int
  deleted_at                         Int?

  api_keys       ApiKey[]
  integrations   Integration[]
  session_tokens SessionToken[]
  connections    Connection[]
  webhooks       Webhook[]
  activities     Activity[]

  organization Organization @relation(fields: [organization_id], references: [id])
}

model ApiKey {
  id             String  @id
  environment_id String
  key            String
  key_hash       String? @unique
  key_iv         String?
  key_tag        String?
  display_name   String?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  environment Environment @relation(fields: [environment_id], references: [id])
}

model SessionToken {
  id                   String  @id
  environment_id       String
  integration_id       String
  connection_id        String?
  expires_at           Int
  auth_scheme          String
  language             String?
  redirect_url         String?
  configuration        Json?
  inclusions           Json?
  exclusions           Json?
  metadata             Json?
  websocket_client_id  String?
  flow                 String?
  prefers_dark_mode    Boolean @default(false)
  code_verifier        String?
  request_token_secret String?
  created_at           Int
  updated_at           Int
  deleted_at           Int?

  environment Environment @relation(fields: [environment_id], references: [id])
}

model Integration {
  id                        String
  provider_key              String
  environment_id            String
  is_enabled                Boolean
  auth_schemes              String[]
  is_using_test_credentials Boolean
  oauth_client_id           String?
  oauth_client_secret       String?
  oauth_client_secret_iv    String?
  oauth_client_secret_tag   String?
  oauth_scopes              String?
  created_at                Int
  updated_at                Int
  deleted_at                Int?

  connections Connection[]
  collections Collection[]
  syncs       Sync[]
  actions     Action[]

  environment Environment @relation(fields: [environment_id], references: [id])

  @@unique([id, environment_id])
}

model Connection {
  id              String
  environment_id  String
  integration_id  String
  auth_scheme     String
  credentials     String
  credentials_iv  String?
  credentials_tag String?
  configuration   Json?
  inclusions      Json?
  exclusions      Json?
  metadata        Json?
  created_at      Int
  updated_at      Int
  deleted_at      Int?

  syncs       Sync[]
  action_runs ActionRun[]
  records     Record[]

  environment Environment @relation(fields: [environment_id], references: [id])
  integration Integration @relation(fields: [integration_id, environment_id], references: [id, environment_id])

  @@unique([id, integration_id])
}

model Collection {
  unique_key                    String
  integration_id                String
  provider_key                  String
  environment_id                String
  is_enabled                    Boolean
  default_sync_frequency        String
  auto_start_syncs              Boolean
  exclude_properties_from_syncs String[]
  text_embedding_model          String
  multimodal_embedding_model    String
  configuration                 Json?
  created_at                    Int
  updated_at                    Int
  deleted_at                    Int?

  syncs Sync[]

  integration Integration @relation(fields: [integration_id, environment_id], references: [id, environment_id])

  @@unique([unique_key, integration_id, environment_id])
}

model Action {
  unique_key     String
  integration_id String
  provider_key   String
  environment_id String
  is_enabled     Boolean
  configuration  Json?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  runs ActionRun[]

  integration Integration @relation(fields: [integration_id, environment_id], references: [id, environment_id])

  @@unique([unique_key, integration_id, environment_id])
}

model Sync {
  collection_key String
  integration_id String
  provider_key   String
  environment_id String
  connection_id  String
  status         String
  frequency      String
  last_synced_at Int?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  runs      SyncRun[]
  schedules SyncSchedule[]

  collection  Collection  @relation(fields: [collection_key, integration_id, environment_id], references: [unique_key, integration_id, environment_id])
  connection  Connection  @relation(fields: [connection_id, integration_id], references: [id, integration_id])
  integration Integration @relation(fields: [integration_id, environment_id], references: [id, environment_id])

  @@unique([collection_key, connection_id, integration_id])
}

model SyncRun {
  id                  String  @id
  collection_key      String
  connection_id       String
  integration_id      String
  status              String
  temporal_run_id     String?
  records_added       Int?
  records_updated     Int?
  records_deleted     Int?
  usage_words         Int?
  usage_images        Int?
  usage_video_seconds Int?
  usage_audio_seconds Int?
  timestamp           Int
  duration            Int?

  sync Sync @relation(fields: [collection_key, connection_id, integration_id], references: [collection_key, connection_id, integration_id])
}

model SyncSchedule {
  id             String @id
  collection_key String
  connection_id  String
  integration_id String
  status         String
  frequency      String
  offset         Int
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  sync Sync @relation(fields: [collection_key, connection_id, integration_id], references: [collection_key, connection_id, integration_id])

  @@unique([collection_key, connection_id, integration_id])
}

model ActionRun {
  id             String @id
  action_key     String
  integration_id String
  connection_id  String
  environment_id String
  status         String
  input          Json
  output         Json
  timestamp      Int
  duration       Int

  action     Action     @relation(fields: [action_key, integration_id, environment_id], references: [unique_key, integration_id, environment_id])
  connection Connection @relation(fields: [connection_id, integration_id], references: [id, integration_id])
}

model Record {
  id             String @id
  collection_key String
  integration_id String
  connection_id  String
  environment_id String
  external_id    String
  hash           String
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  connection Connection @relation(fields: [connection_id, integration_id], references: [id, integration_id])

  @@unique([external_id, collection_key, connection_id, integration_id])
  @@unique([hash, collection_key, connection_id, integration_id])
}

model Webhook {
  id                  String   @id
  environment_id      String
  url                 String
  event_subscriptions String[]
  is_enabled          Boolean
  secret              String
  secret_iv           String?
  secret_tag          String?
  created_at          Int
  updated_at          Int
  deleted_at          Int?

  events WebhookEvent[]

  environment Environment @relation(fields: [environment_id], references: [id])
}

model WebhookEvent {
  id         String  @id
  webhook_id String
  name       String
  payload    Json
  delivered  Boolean
  timestamp  Int

  webhook Webhook @relation(fields: [webhook_id], references: [id])
}

model Activity {
  id               String  @id
  environment_id   String
  integration_id   String?
  connection_id    String?
  session_token_id String?
  collection_key   String?
  action_key       String?
  level            String
  action           String
  timestamp        Int

  logs ActivityLog[]

  environment Environment @relation(fields: [environment_id], references: [id])
}

model ActivityLog {
  id          String @id
  activity_id String
  level       String
  message     String
  payload     Json?
  timestamp   Int

  activity Activity @relation(fields: [activity_id], references: [id])
}
