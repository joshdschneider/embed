generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id              String  @id
  type            String
  name            String?
  organization_id String?
  created_at      Int
  updated_at      Int
  deleted_at      Int?

  users        User[]
  environments Environment[]
}

model User {
  id         String  @id
  account_id String
  email      String
  first_name String?
  last_name  String?
  created_at Int
  updated_at Int
  deleted_at Int?

  account Account @relation(fields: [account_id], references: [id])
}

model Environment {
  id                      String  @id
  account_id              String
  type                    String
  enable_new_integrations Boolean
  branding                Json
  created_at              Int
  updated_at              Int
  deleted_at              Int?

  api_keys        ApiKey[]
  integrations    Integration[]
  link_tokens     LinkToken[]
  linked_accounts LinkedAccount[]
  webhooks        Webhook[]
  activities      Activity[]

  account Account @relation(fields: [account_id], references: [id])
}

model ApiKey {
  id             String  @id
  environment_id String
  key            String  @unique
  key_iv         String?
  key_tag        String?
  name           String?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  environment Environment @relation(fields: [environment_id], references: [id])
}

model LinkToken {
  id                     String  @id
  environment_id         String
  integration_key        String?
  linked_account_id      String?
  expires_at             Int
  language               String?
  redirect_url           String?
  metadata               Json?
  can_choose_integration Boolean
  consent_given          Boolean @default(false)
  consent_timestamp      Int?
  configuration          Json?
  websocket_client_id    String?
  link_method            String?
  prefers_dark_mode      Boolean @default(false)
  code_verifier          String?
  request_token_secret   String?
  created_at             Int
  updated_at             Int
  deleted_at             Int?

  environment Environment @relation(fields: [environment_id], references: [id])
}

model LinkedAccount {
  id              String  @id
  environment_id  String
  integration_key String
  credentials     String
  credentials_iv  String?
  credentials_tag String?
  configuration   Json
  metadata        Json?
  consent_given   Boolean @default(false)
  consent_ip      String?
  consent_date    Int?
  created_at      Int
  updated_at      Int
  deleted_at      Int?

  syncs       Sync[]
  action_runs ActionRun[]

  environment Environment @relation(fields: [environment_id], references: [id])
  integration Integration @relation(fields: [integration_key, environment_id], references: [unique_key, environment_id])
}

model Integration {
  unique_key            String
  environment_id        String
  display_name          String
  is_enabled            Boolean
  use_oauth_credentials Boolean
  oauth_client_id       String?
  oauth_client_secret   String?
  oauth_scopes          String?
  rank                  Int?
  created_at            Int
  updated_at            Int
  deleted_at            Int?

  linked_accounts LinkedAccount[]
  collections     Collection[]
  syncs           Sync[]
  actions         Action[]
  action_runs     ActionRun[]

  environment Environment @relation(fields: [environment_id], references: [id])

  @@unique([unique_key, environment_id])
}

model Collection {
  unique_key          String
  integration_key     String
  environment_id      String
  is_enabled          Boolean
  default_frequency   String
  auto_start          Boolean
  excluded_properties String[]
  created_at          Int
  updated_at          Int
  deleted_at          Int?

  integration Integration @relation(fields: [integration_key, environment_id], references: [unique_key, environment_id])

  @@unique([unique_key, integration_key])
}

model Action {
  unique_key      String
  integration_key String
  environment_id  String
  is_enabled      Boolean
  created_at      Int
  updated_at      Int
  deleted_at      Int?

  runs ActionRun[]

  integration Integration @relation(fields: [integration_key, environment_id], references: [unique_key, environment_id])

  @@unique([unique_key, integration_key])
}

model Sync {
  collection_key    String
  integration_key   String
  environment_id    String
  linked_account_id String
  frequency         String
  last_synced_at    Int?
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  runs      SyncRun[]
  schedules SyncSchedule[]

  linked_account LinkedAccount @relation(fields: [linked_account_id], references: [id])
  integration    Integration   @relation(fields: [integration_key, environment_id], references: [unique_key, environment_id])

  @@unique([collection_key, linked_account_id])
}

model SyncRun {
  id                String  @id
  collection_key    String
  linked_account_id String
  type              String
  status            String
  run_id            String?
  added             Int?
  updated           Int?
  deleted           Int?
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  sync Sync @relation(fields: [collection_key, linked_account_id], references: [collection_key, linked_account_id])
}

model SyncSchedule {
  id                String @id
  collection_key    String
  linked_account_id String
  status            String
  frequency         String
  offset            Int
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  sync Sync @relation(fields: [collection_key, linked_account_id], references: [collection_key, linked_account_id])
}

model ActionRun {
  action_key        String
  integration_key   String
  environment_id    String
  linked_account_id String
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  action         Action        @relation(fields: [action_key, integration_key], references: [unique_key, integration_key])
  linked_account LinkedAccount @relation(fields: [linked_account_id], references: [id])
  integration    Integration   @relation(fields: [integration_key, environment_id], references: [unique_key, environment_id])

  @@unique([action_key, linked_account_id])
}

model Webhook {
  id             String   @id
  environment_id String
  url            String
  events         String[]
  is_enabled     Boolean
  secret         String
  secret_iv      String?
  secret_tag     String?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  logs WebhookLog[]

  environment Environment @relation(fields: [environment_id], references: [id])
}

model WebhookLog {
  id         String  @id
  webhook_id String
  event      String
  payload    Json
  delivered  Boolean
  timestamp  Int

  webhook Webhook @relation(fields: [webhook_id], references: [id])
}

model Activity {
  id                String  @id
  environment_id    String
  integration_key   String?
  linked_account_id String?
  link_token_id     String?
  collection_key    String?
  action_key        String?
  level             String
  action            String
  timestamp         Int

  logs ActivityLog[]

  environment Environment @relation(fields: [environment_id], references: [id])
}

model ActivityLog {
  id          String @id
  activity_id String
  level       String
  message     String
  payload     Json?
  timestamp   Int

  activity Activity @relation(fields: [activity_id], references: [id])
}
