generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id
  type                  String
  name                  String?
  cloud_organization_id String?
  created_at            Int
  updated_at            Int
  deleted_at            Int?

  users        User[]
  environments Environment[]
}

model User {
  id         String  @id
  account_id String
  email      String
  first_name String?
  last_name  String?
  created_at Int
  updated_at Int
  deleted_at Int?

  account Account @relation(fields: [account_id], references: [id])
}

model Environment {
  id                      String  @id
  account_id              String
  type                    String
  enable_new_integrations Boolean
  branding                Json
  created_at              Int
  updated_at              Int
  deleted_at              Int?

  api_keys        ApiKey[]
  integrations    Integration[]
  linked_accounts LinkedAccount[]
  link_tokens     LinkToken[]
  webhooks        Webhook[]
  activities      Activity[]

  account Account @relation(fields: [account_id], references: [id])
}

model ApiKey {
  id             String  @id
  environment_id String
  key            String  @unique
  key_iv         String?
  key_tag        String?
  name           String?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  environment Environment @relation(fields: [environment_id], references: [id])
}

model LinkToken {
  id                     String  @id
  environment_id         String
  integration_slug       String?
  linked_account_id      String?
  expires_at             Int
  language               String?
  redirect_url           String?
  metadata               Json?
  can_choose_integration Boolean
  consent_given          Boolean @default(false)
  consent_ip             String?
  consent_date           Int?
  configuration          Json?
  websocket_client_id    String?
  link_method            String?
  prefers_dark_mode      Boolean @default(false)
  code_verifier          String?
  request_token_secret   String?
  created_at             Int
  updated_at             Int
  deleted_at             Int?

  environment Environment @relation(fields: [environment_id], references: [id])
}

model LinkedAccount {
  id               String  @id
  environment_id   String
  integration_slug String
  credentials      String
  credentials_iv   String?
  credentials_tag  String?
  configuration    Json
  metadata         Json?
  consent_given    Boolean @default(false)
  consent_ip       String?
  consent_date     Int?
  created_at       Int
  updated_at       Int
  deleted_at       Int?

  syncs   Sync[]
  actions Action[]

  environment Environment @relation(fields: [environment_id], references: [id])
  integration Integration @relation(fields: [integration_slug, environment_id], references: [slug, environment_id])
}

model Integration {
  slug                   String
  environment_id         String
  is_enabled             Boolean
  use_client_credentials Boolean
  oauth_client_id        String?
  oauth_client_secret    String?
  oauth_scopes           String?
  rank                   Int?
  created_at             Int
  updated_at             Int
  deleted_at             Int?

  linked_accounts LinkedAccount[]
  syncs           IntegrationSync[]
  actions         IntegrationAction[]

  environment Environment @relation(fields: [environment_id], references: [id])

  @@unique([slug, environment_id])
}

model IntegrationSync {
  slug              String
  integration_slug  String
  environment_id    String
  is_enabled        Boolean
  default_frequency String
  auto_start        Boolean
  excluded_fields   String[]
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  integration Integration @relation(fields: [integration_slug, environment_id], references: [slug, environment_id])

  @@unique([slug, integration_slug])
}

model IntegrationAction {
  slug                   String
  integration_slug       String
  environment_id         String
  is_enabled             Boolean
  require_human_approval Boolean @default(false)
  created_at             Int
  updated_at             Int
  deleted_at             Int?

  integration Integration @relation(fields: [integration_slug, environment_id], references: [slug, environment_id])

  @@unique([slug, integration_slug])
}

model Sync {
  slug              String
  environment_id    String
  linked_account_id String
  frequency         String
  last_synced_at    Int?
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  jobs      SyncJob[]
  schedules SyncSchedule[]

  linked_account LinkedAccount @relation(fields: [linked_account_id], references: [id])

  @@unique([slug, linked_account_id])
}

model SyncJob {
  id                String  @id
  sync_slug         String
  linked_account_id String
  type              String
  status            String
  run_id            String?
  added             Int?
  updated           Int?
  deleted           Int?
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  sync Sync @relation(fields: [sync_slug, linked_account_id], references: [slug, linked_account_id])
}

model SyncSchedule {
  id                String @id
  sync_slug         String
  linked_account_id String
  status            String
  frequency         String
  offset            Int
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  sync Sync @relation(fields: [sync_slug, linked_account_id], references: [slug, linked_account_id])
}

model Action {
  id                String @id
  slug              String
  linked_account_id String
  created_at        Int
  updated_at        Int
  deleted_at        Int?

  linked_account LinkedAccount @relation(fields: [linked_account_id], references: [id])
}

model Webhook {
  id             String   @id
  environment_id String
  url            String
  events         String[]
  is_enabled     Boolean
  secret         String
  secret_iv      String?
  secret_tag     String?
  created_at     Int
  updated_at     Int
  deleted_at     Int?

  logs WebhookLog[]

  environment Environment @relation(fields: [environment_id], references: [id])
}

model WebhookLog {
  id         String  @id
  webhook_id String
  event      String
  payload    Json
  delivered  Boolean
  timestamp  Int

  webhook Webhook @relation(fields: [webhook_id], references: [id])
}

model Activity {
  id                   String  @id
  environment_id       String
  integration_provider String?
  linked_account_id    String?
  link_token_id        String?
  sync_slug            String?
  action_id            String?
  level                String
  action               String
  timestamp            Int

  logs ActivityLog[]

  environment Environment @relation(fields: [environment_id], references: [id])
}

model ActivityLog {
  id          String @id
  activity_id String
  level       String
  message     String
  payload     Json?
  timestamp   Int

  activity Activity @relation(fields: [activity_id], references: [id])
}
